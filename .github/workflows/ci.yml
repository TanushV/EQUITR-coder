# GitHub Actions workflow for CI/CD
name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Optional tools used in examples/tests
          pip install coverage

      - name: Lint (ruff)
        run: |
          python -m ruff --version || pip install ruff
          python -m ruff check .

      - name: Type check (mypy)
        run: |
          python -m mypy --version || pip install mypy
          python -m mypy equitrcoder || true

      - name: Run unit & integration tests with coverage
        run: |
          python -m coverage run -m pytest -q
          python -m coverage report -m
          python -m coverage xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Build docs (sanity)
        if: ${{ always() }}
        run: |
          echo "Checking docs tree..."
          test -d docs || (echo "docs/ missing" && exit 1)

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build package
        run: |
          python -m pip install --upgrade pip build twine
          python -m build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
      # Optional: publish to PyPI when secrets available
      - name: Publish to PyPI
        if: ${{ secrets.PYPI_TOKEN != '' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload dist/*
