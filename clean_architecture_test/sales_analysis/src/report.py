"""Report generator for sales analysis pipeline.

This module creates a comprehensive markdown report with summary tables,
visualizations, and reproduction instructions.
"""

import os
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

# Using embedded template to avoid external template files
REPORT_TEMPLATE = """# Sales Analysis Report

Generated on: {{ generation_date }}

## Executive Summary

This report provides a comprehensive analysis of sales data including revenue metrics,
product performance, and monthly trends.

### Key Metrics

- **Total Revenue**: ${{ "{:,.2f}".format(stats.total_revenue) }}
- **Average Order Value**: ${{ "{:,.2f}".format(stats.average_order_value) }}
- **Total Orders**: {{ stats.total_orders }}
- **Date Range**: {{ stats.start_date }} to {{ stats.end_date }}

## Top 5 Products by Revenue

| Rank | Product | Revenue | Orders |
|------|---------|---------|--------|
{% for product in stats.top_products %}
| {{ loop.index }} | {{ product.product }} | ${{ "{:,.2f}".format(product.revenue) }} | {{ product.orders }} |
{% endfor %}

## Monthly Revenue Trend

![Monthly Revenue Trend]({{ figures_dir }}/monthly_revenue_trend.png)

*Figure 1: Monthly revenue trend over the analysis period*

## Revenue by Product

![Revenue by Product]({{ figures_dir }}/revenue_by_product.png)

*Figure 2: Top products ranked by total revenue*

## Data Quality Summary

- **Original Records**: {{ stats.original_records }}
- **Clean Records**: {{ stats.clean_records }}
- **Records Removed**: {{ stats.removed_records }}
- **Data Quality**: {{ "{:.1f}".format((stats.clean_records / stats.original_records) * 100) }}%

## How to Reproduce This Report

### Prerequisites

```bash
# Create virtual environment
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate

# Install dependencies
pip install -r requirements.txt
```

### Running the Analysis

```bash
# Run with default settings (last 12 months)
python main.py

# Run with custom date range
python main.py --start-date 2023-01-01 --end-date 2023-12-31
```

### Expected Outputs

After running the pipeline, you will find:

1. **Raw data**: `data/raw/sales_data.csv`
2. **Clean data**: `data/processed/clean_sales.csv`
3. **Visualizations**: `reports/figures/` (PNG files)
4. **This report**: `reports/sales_report.md`
5. **Logs**: `logs/pipeline.log`

### Verification

To verify the results:

```bash
# Run tests
pytest tests/ -v

# Check code quality
flake8 src/

# Verify coverage
pytest --cov=src tests/
```

### Troubleshooting

- **Missing dependencies**: Ensure all packages in `requirements.txt` are installed
- **Permission errors**: Check write permissions for `data/`, `reports/`, and `logs/` directories
- **Date format errors**: Use YYYY-MM-DD format for start and end dates
- **Memory issues**: The pipeline processes ~1000-1050 records and should complete in under 10 seconds

## Technical Details

### Data Processing Pipeline

1. **Data Generation**: Creates synthetic sales data with 1000-1050 records
2. **Data Cleaning**: Removes null values, negative prices/quantities, and applies date filtering
3. **Analysis**: Calculates revenue metrics, product rankings, and monthly trends
4. **Visualization**: Generates bar chart for product revenue and line chart for monthly trends
5. **Report Generation**: Compiles all results into this markdown report

### Data Schema

- `order_id`: Unique identifier for each order
- `customer_id`: Customer identifier
- `product`: Product name
- `quantity`: Number of items ordered
- `unit_price`: Price per unit
- `order_date`: Date of order (YYYY-MM-DD)
- `region`: Geographic region

---

*Report generated by the Sales Analysis Pipeline v1.0*
"""


class StatsResult:
    """Container for analysis results."""
    
    def __init__(
        self,
        total_revenue: float,
        average_order_value: float,
        total_orders: int,
        start_date: str,
        end_date: str,
        top_products: List[Dict[str, Any]],
        original_records: int,
        clean_records: int,
        removed_records: int
    ):
        self.total_revenue = total_revenue
        self.average_order_value = average_order_value
        self.total_orders = total_orders
        self.start_date = start_date
        self.end_date = end_date
        self.top_products = top_products
        self.original_records = original_records
        self.clean_records = clean_records
        self.removed_records = removed_records


def render_report(
    stats: StatsResult,
    fig_dir: Path,
    out_path: Path
) -> None:
    """Generate a markdown report with analysis results.
    
    Args:
        stats: Statistics and analysis results
        fig_dir: Directory containing visualization figures
        out_path: Path where the report should be saved
    
    Raises:
        IOError: If unable to write the report file
    """
    # Ensure output directory exists
    out_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Prepare template variables
    template_vars = {
        'stats': stats,
        'generation_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'figures_dir': fig_dir.relative_to(out_path.parent).as_posix()
    }
    
    # Simple template rendering without Jinja2 dependency
    # Using basic string formatting with a template
    report_content = REPORT_TEMPLATE
    
    # Replace template variables
    for key, value in template_vars.items():
        if key == 'stats':
            # For the stats object, we need to handle nested access
            continue
        report_content = report_content.replace(f'{{{{ {key} }}}}', str(value))
    
    # Handle stats object replacements
    report_content = report_content.replace(
        '{{ stats.total_revenue }}', str(stats.total_revenue)
    )
    report_content = report_content.replace(
        '{{ stats.average_order_value }}', str(stats.average_order_value)
    )
    report_content = report_content.replace(
        '{{ stats.total_orders }}', str(stats.total_orders)
    )
    report_content = report_content.replace(
        '{{ stats.start_date }}', str(stats.start_date)
    )
    report_content = report_content.replace(
        '{{ stats.end_date }}', str(stats.end_date)
    )
    report_content = report_content.replace(
        '{{ stats.original_records }}', str(stats.original_records)
    )
    report_content = report_content.replace(
        '{{ stats.clean_records }}', str(stats.clean_records)
    )
    report_content = report_content.replace(
        '{{ stats.removed_records }}', str(stats.removed_records)
    )
    
    # Write the report
    try:
        with open(out_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
    except IOError as e:
        raise IOError(f"Failed to write report to {out_path}: {e}")


def render_report_with_jinja2(
    stats: StatsResult,
    fig_dir: Path,
    out_path: Path
) -> None:
    """Alternative implementation using Jinja2 for more advanced templating.
    
    This function requires jinja2 to be installed and provides more sophisticated
    templating capabilities including loops, conditionals, and filters.
    
    Args:
        stats: Statistics and analysis results
        fig_dir: Directory containing visualization figures
        out_path: Path where the report should be saved
    """
    try:
        from jinja2 import Template
        
        template = Template(REPORT_TEMPLATE)
        
        template_vars = {
            'stats': stats,
            'generation_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'figures_dir': fig_dir.relative_to(out_path.parent).as_posix()
        }
        
        rendered = template.render(**template_vars)
        
        out_path.parent.mkdir(parents=True, exist_ok=True)
        with open(out_path, 'w', encoding='utf-8') as f:
            f.write(rendered)
            
    except ImportError:
        # Fall back to basic string formatting
        render_report(stats, fig_dir, out_path)


if __name__ == '__main__':
    # Example usage for testing
    example_stats = StatsResult(
        total_revenue=125000.50,
        average_order_value=125.50,
        total_orders=1000,
        start_date='2023-01-01',
        end_date='2023-12-31',
        top_products=[
            {'product': 'Widget A', 'revenue': 25000.00, 'orders': 200},
            {'product': 'Widget B', 'revenue': 22000.00, 'orders': 180},
            {'product': 'Widget C', 'revenue': 18000.00, 'orders': 150},
            {'product': 'Widget D', 'revenue': 15000.00, 'orders': 120},
            {'product': 'Widget E', 'revenue': 12000.00, 'orders': 100}
        ],
        original_records=1050,
        clean_records=1000,
        removed_records=50
    )
    
    # Create test report
    test_fig_dir = Path('../reports/figures')
    test_out_path = Path('../reports/test_sales_report.md')
    
    render_report(example_stats, test_fig_dir, test_out_path)
    print(f"Test report generated at: {test_out_path}")